////package com.email.writer.app;
////
////import java.util.Map;
////
////import org.springframework.beans.factory.annotation.Value;
////import org.springframework.stereotype.Service;
////import org.springframework.web.reactive.function.client.WebClient;
////
////import com.fasterxml.jackson.databind.JsonNode;
////import com.fasterxml.jackson.databind.ObjectMapper;
////
////@Service
////public class EmailGeneratorService {
////	
////	private final WebClient webClient;
////	
////	
////	public EmailGeneratorService(WebClient.Builder webClientBuilder) {
////		this.webClient = webClientBuilder.build();
////	}
////	
////	@Value("${gemini.api.url}")
////	private String geminiApiUrl;
////	
////	@Value("${gemini.api.key}")
////	private String geminiApiKey;
////	
////	public String generateEmailReply(EmailRequest emailRequest) {
////		//Build the prompt
////		String prompt = buildPrompt(emailRequest);
////		//Craft a request
////		Map<String,Object> requestBody = Map.of(
////				"contents",new Object[] {
////						Map.of("parts",new Object[] {
////								Map.of("text",prompt)
////						})
////				}
////				
////		); 
////		//Do Request and get Response
////		String response = webClient.post()
////				.uri(geminiApiUrl)
////				.header("Content-Type","application/json")
////				.header("X-goog-api-key", geminiApiKey)
////				.retrieve()
////				.bodyToMono(String.class)
////				.block();
////		//Return Response
////		return extractResponseContent(response);
////	}
////
////	private String extractResponseContent(String response) {
////		try {
////			ObjectMapper mapper = new ObjectMapper();
////			JsonNode rootNode = mapper.readTree(response);
////			return rootNode.path("candidates")
////					.get(0)
////					.path("content")
////					.path("parts")
////					.get(0)
////					.path("text")
////					.asText();
////		}catch (Exception e) {
////			return "Error Processing req. : "+e.getMessage();
////		}
////	}
////
////	private String buildPrompt(EmailRequest emailRequest) {
////	    StringBuilder prompt = new StringBuilder();
////	    prompt.append("Generate a professional email reply for the following email content. Please don't generate a subject line. ");
////	    if (emailRequest.getTone() != null && !emailRequest.getTone().isEmpty()) {
////	        prompt.append("Use a ").append(emailRequest.getTone()).append(" tone. ");
////	    }
////	    prompt.append("\nOriginal email:\n").append(emailRequest.getEmailContent());
////	    return prompt.toString();
////	}
////
////}
//
//package com.email.writer.app;
//
//import java.util.List;
//import java.util.Map;
//
//import org.springframework.beans.factory.annotation.Value;
//import org.springframework.stereotype.Service;
//import org.springframework.web.reactive.function.client.WebClient;
//
//import com.fasterxml.jackson.databind.JsonNode;
//import com.fasterxml.jackson.databind.ObjectMapper;
//
//@Service
//public class EmailGeneratorService {
//
//    private final WebClient webClient;
//
//    public EmailGeneratorService(WebClient.Builder webClientBuilder) {
//        this.webClient = webClientBuilder.build();
//    }
//
//    @Value("${gemini.api.url}")
//    private String geminiApiUrl;
//
//    @Value("${gemini.api.key}")
//    private String geminiApiKey;
//
//    public String generateEmailReply(EmailRequest emailRequest) {
//        // Build the prompt
//        String prompt = buildPrompt(emailRequest);
//
//        // Craft the request body with List.of() instead of new Object[]
//        Map<String, Object> requestBody = Map.of(
//            "contents", List.of(
//                Map.of("parts", List.of(
//                    Map.of("text", prompt)
//                ))
//            )
//        );
//
//        // Do request and get response, including the bodyValue(requestBody)
//        String response = webClient.post()
//            .uri(geminiApiUrl)
//            .header("Content-Type", "application/json")
//            .header("X-goog-api-key", geminiApiKey)
//            .bodyValue(requestBody) // IMPORTANT: include the request body
//            .retrieve()
//            .bodyToMono(String.class)
//            .block();
//
//        // Extract and return the generated response content
//        return extractResponseContent(response);
//    }
//
//    private String extractResponseContent(String response) {
//        try {
//            ObjectMapper mapper = new ObjectMapper();
//            JsonNode rootNode = mapper.readTree(response);
//            return rootNode.path("candidates")
//                .get(0)
//                .path("content")
//                .path("parts")
//                .get(0)
//                .path("text")
//                .asText();
//        } catch (Exception e) {
//            return "Error processing response: " + e.getMessage();
//        }
//    }
//
//    private String buildPrompt(EmailRequest emailRequest) {
//        StringBuilder prompt = new StringBuilder();
//        prompt.append("Generate a professional email reply for the following email content. Please don't generate a subject line. ");
//        if (emailRequest.getTone() != null && !emailRequest.getTone().isEmpty()) {
//            prompt.append("Use a ").append(emailRequest.getTone()).append(" tone. ");
//        }
//        prompt.append("\nOriginal email:\n").append(emailRequest.getEmailContent());
//        return prompt.toString();
//    }
//}
//

package com.email.writer.app;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class EmailGeneratorService {

    private final WebClient webClient;

    @Value("${gemini.api.url}")
    private String geminiApiUrl;

    @Value("${gemini.api.key}")
    private String geminiApiKey;

    public EmailGeneratorService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.build();
    }

    public String generateEmailReply(EmailRequest emailRequest) {
        String prompt = buildPrompt(emailRequest);

        // Gemini requires "role":"user" and "parts": [{ "text": ... }]
        Map<String, Object> requestBody = Map.of(
            "contents", List.of(
                Map.of(
                    "role", "user",
                    "parts", List.of(
                        Map.of("text", prompt)
                    )
                )
            )
        );

        // Send request with API key as query param (not header)
        String response = webClient.post()
            .uri(uriBuilder -> uriBuilder
                .path(geminiApiUrl)
                .queryParam("key", geminiApiKey)
                .build())
            .header("Content-Type", "application/json")
            .bodyValue(requestBody)
            .retrieve()
            .bodyToMono(String.class)
            .block();

        return extractResponseContent(response);
    }

    private String extractResponseContent(String response) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(response);
            return rootNode.path("candidates")
                .get(0)
                .path("content")
                .path("parts")
                .get(0)
                .path("text")
                .asText();
        } catch (Exception e) {
            return "Error processing response: " + e.getMessage();
        }
    }

    private String buildPrompt(EmailRequest emailRequest) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("Generate a professional email reply for the following email content. Please don't generate a subject line. ");
        if (emailRequest.getTone() != null && !emailRequest.getTone().isEmpty()) {
            prompt.append("Use a ").append(emailRequest.getTone()).append(" tone. ");
        }
        prompt.append("\nOriginal email:\n").append(emailRequest.getEmailContent());
        return prompt.toString();
    }
}
